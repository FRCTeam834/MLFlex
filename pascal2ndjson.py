# Written by Christian Piper
# First Robotics Team 834
# Created: 12/22/20

# Import libraries
from xml.etree import ElementTree
from labelbox import Client, Project
import labelbox
import common_functions
import argparse
import ndjson
import shutil
import time
import os

# Main function, pulls args, preps output, then converts the files
def pascal2ndjson():
    
    # Initialize parser
    parser = argparse.ArgumentParser(description = 'MLFlex: A quick and easy annotation manipulation tool. Annotation manipulation program') 

    # Create required argument group
    required_args = parser.add_argument_group('required arguments')

    # Add arguments
    # Required (String) arguments
    required_args.add_argument("-i", "--input",        required = True, help = "Input path to the folder containing the PascalVOC annotations.")
    required_args.add_argument("-o", "--output",       required = True, help = "Output path for the .zip file")
    required_args.add_argument("-p", "--project_name", required = True, help = "The name of the project that the files are to be added to")


    # Optional (Boolean) arguments
    parser.add_argument("-c", "--cleanup",  action = "store_true", default = False, help = "If parameter is specified, then the input folder and files will be automatically deleted after use")
    parser.add_argument("-f", "--feedback", action = "store_true", default = True,  help = "If parameter is specified, then the feedback will be provided during the conversion process")
    parser.add_argument("-k", "--api_key",                                          help = "API key for LabelBox. If not specified, then the function will attempt to use an environment variable. If none exists, it will throw an error.")
    
    # Read arguments from command line 
    args = parser.parse_args()

    # Get the start time
    start_time = time.time()

    # Make sure that we have a key
    if args.api_key:

        # The value of the key should come from the command line
        api_key = args.api_key

    else:

        # Check if stored in an environment variable. If so, set it. Otherwise, throw an error
        try:
            api_key = os.environ['LABELBOX_API_KEY']
        except KeyError:
            raise KeyError("Please specify an API key for LabelBox either in an -k [key] argument or the LABELBOX_API_KEY environment variable")

    # Connect to Labelbox
    labelbox_client = Client(api_key)

    # Get the project that Labelbox should be working on
    for user_project in labelbox_client.get_projects():

        # Check if this project is the one that we're looking for
        if user_project.name == args.project_name:

            # It is. Set the project to this one
            project = user_project
            break

    # Check to see if there was a project with the name in existence
    if not project:

        # We need to create one if it doesn't exist yet
        project = labelbox_client.create_project(name = args.project_name, description = "Autogenerated project from MLFlex")
    
    # Get the dataset's name
    dataset_name = os.path.basename(args.input)

    # Check through the datasets in the project
    for project_dataset in labelbox_client.get_datasets():

        # Check if this dataset matches the folder name
        if project_dataset.name == dataset_name:

            # Dataset already exists, throw an error
            raise KeyError("Dataset already exists in project.")

    # Create the new dataset if we have made it this far
    dataset = labelbox_client.create_dataset(name = dataset_name, projects = project)

    # Get the full paths
    input_path = os.path.abspath(args.input)
    output_path = os.path.abspath(args.output)

    # Get all of the files in the input directory
    input_files = os.listdir(os.path.join(input_path, "Annotations"))
    
    # Create an accumulator for counting the current file
    if args.feedback:
        current_file_index = 1
    
    # Loop through the files provided
    for filename in input_files:

        # ! Need to add image file imports and annotation uploads

        # Get all of the objects in the array
        image_objects = common_functions.get_PascalVOC_objects(filename, input_path)

        # Create an ndjson with the object array
        common_functions.build_ndjson_annotation(image_objects, filename, os.path.join(output_path, "Annotations"))

        # Only give feedback if needed
        if args.feedback:

            # Print out the current status
            print("Current file: " + str(current_file_index) + " out of " + str(len(input_files)))

            # Change the counter
            current_file_index =+ 1

    # Cleanup the files if specified
    if args.cleanup:
        shutil.rmtree(input_path)

    # Get the total time
    total_time = time.time() - start_time
    
    # Print total time to convert
    if args.feedback:
        
        # Print the feedback
        print("Total time to convert: " + str(round(total_time, 4)) + " seconds")


# Run the main function
pascal2ndjson()